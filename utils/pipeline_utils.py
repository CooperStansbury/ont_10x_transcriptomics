import os
import sys
import glob
import re
from datetime import datetime
from pathlib import Path
import pandas as pd
import yaml
import json
import tabulate 


HEADER_STR = "#" * 20


def log(message):
    """Prints a timestamped message to the console."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"{timestamp} - {message}")


def get_output_filenames(input_df, extension, output_path):
  """Generates output filenames for processed data.

  Constructs output filenames by combining sample IDs from an input DataFrame 
  with a specified file extension and output directory path. The function 
  expects the input DataFrame to have a 'sample_id' column.

  Args:
    input_df: A pandas DataFrame with a 'sample_id' column.
    extension: The desired file extension for output files (e.g., '.txt', '.csv').
    output_path: The directory where output files will be written.

  Returns:
    A list of complete output filenames (including the output path and extension).
  """
  output_names = input_df['sample_id'].to_list()
  output_names = [f"{output_path}fastq/{x}.fastq{extension}" for x in output_names]
  return output_names


def get_chromosome_names(wildcards):
    """
    Retrieves the list of chromosome names from the `get_chroms` checkpoint.

    This function reads the output file generated by the `get_chroms` checkpoint,
    which contains a list of chromosome names, one per line. It returns a list
    of these chromosome names, stripping any leading/trailing whitespace.

    Args:
        wildcards: A dictionary-like object containing wildcard values 
                   (not used in this specific function, but included 
                   for compatibility with Snakemake rules).

    Returns:
        list: A list of chromosome names.
    """
    with open(checkpoints.get_chroms.get(**wildcards).output[0], "r") as f:
        return [line.strip() for line in f]


def get_names(names_file):
    """
    Reads a file containing names, one per line.

    Args:
        names_file (str): Path to the file containing names.

    Returns:
        list: A list of names.
    """
    with open(names_file) as f:
        return [line.strip() for line in f]
    
    
    
    
    